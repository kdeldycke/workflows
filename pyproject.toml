[project]
# Docs: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/
name = "gha-utils"
version = "4.4.5"
# Python versions and their status: https://devguide.python.org/versions/
requires-python = ">= 3.9"
description = "⚙️ CLI helpers for GitHub Actions + reuseable workflows"
authors = [{ name = "Kevin Deldycke", email = "kevin@deldycke.com" }]
readme = "readme.md"
keywords = [
    'build-automation',
    'changelog-formatter',
    'ci-cd',
    'cli',
    'formatting',
    'github-actions',
    'labels',
    'linting',
    'markdown',
    'mypy',
    'nuitka',
    'packaging',
    'pypi',
    'python',
    'release-automation',
    'sphinx',
    'sponsorship',
    'terminal',
    'typo',
    'workflow-reusable',
    'yaml',
]
classifiers = [
    # See: https://pypi.org/pypi?%3Aaction=list_classifiers
    'Development Status :: 5 - Production/Stable',
    'Environment :: Console',
    'Framework :: Sphinx',
    'Framework :: Pelican',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX :: Linux',
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Unix Shell',
    'Topic :: Documentation :: Sphinx',
    'Topic :: File Formats :: JSON',
    'Topic :: Security',
    'Topic :: Software Development :: Build Tools',
    'Topic :: Software Development :: Compilers',
    'Topic :: Software Development :: Documentation',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Software Development :: Quality Assurance',
    'Topic :: Software Development :: Version Control :: Git',
    'Topic :: System :: Archiving :: Packaging',
    'Topic :: System :: Installation/Setup',
    'Topic :: System :: Shells',
    'Topic :: System :: Software Distribution',
    'Topic :: Terminals',
    'Topic :: Text Processing :: Markup :: HTML',
    'Topic :: Text Processing :: Markup :: Markdown',
    'Topic :: Utilities',
    'Typing :: Typed',
]
dependencies = [
    "backports.strenum ~= 1.3.1 ; python_version < '3.11'",
    # Loose version to let click-extra set its own stricter dependency.
    "boltons >= 24.0.0",
    # Dependency version is more relaxed on bump-my-version to prevent chicken and egg
    # while releasing gha-utils itself.
    # v0.21.0 is the first to rely on wcmatch library.
    "bump-my-version >= 0.21.0",
    "click-extra ~= 4.9.0",
    "packaging ~= 24.1",
    "PyDriller ~= 2.6",
    "pyproject-metadata ~= 0.8.0",
    "tomli ~= 2.0.1 ; python_version < '3.11'",
    # Loose version to let click-extra set its own stricter dependency.
    "wcmatch >= 8.5",
]

[project.urls]
"Homepage" = 'https://github.com/kdeldycke/workflows'
"Repository" = 'https://github.com/kdeldycke/workflows'
"Funding" = "https://github.com/sponsors/kdeldycke"
"Issues" = "https://github.com/kdeldycke/workflows/issues"
"Changelog" = "https://github.com/kdeldycke/workflows/blob/main/changelog.md"

[project.scripts]
gha-utils = "gha_utils.__main__:main"

[tool.setuptools.packages.find]
include = ["gha_utils"]

[tool.mypy]
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
pretty = true

[tool.bumpversion]
current_version = "4.4.5"
allow_dirty = true
ignore_missing_files = true

[[tool.bumpversion.files]]
# Update Python package version in any __init__.py file.
glob = "./**/__init__.py"
ignore_missing_version = true

[[tool.bumpversion.files]]
# Update version in project section.
filename = "./pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
# Update the version in Markdown changelog.
filename = "./changelog.md"
search = "## [{current_version} (unreleased)]("
replace = "## [{new_version} (unreleased)]("

[[tool.bumpversion.files]]
# Update the version in the citation file.
filename = "./citation.cff"
search = "version: {current_version}"
replace = "version: {new_version}"

[[tool.bumpversion.files]]
# Update the release date in the citation file.
filename = "./citation.cff"
regex = true
search = "date-released: \\d{{4}}-\\d{{2}}-\\d{{2}}"
replace = "date-released: {utcnow:%Y-%m-%d}"
