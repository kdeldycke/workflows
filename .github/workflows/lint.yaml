---
name: Lint
"on":
  workflow_call:
  push:
    branches:
      - main
  pull_request:

concurrency:
  # Group workflow jobs so new commits cancels in-progress execution triggered by previous commits.
  # Source: https://mail.python.org/archives/list/pypa-committers@python.org/thread/PCBCQMJF64JGRBOX7E2EE4YLKHT4DI55/
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:

  project-metadata:
    name: Project metadata
    runs-on: ubuntu-22.04
    outputs:
      python_files: ${{ steps.project-metadata.outputs.python_files }}
      is_poetry_project: ${{ steps.project-metadata.outputs.is_poetry_project }}
      package_name: ${{ steps.project-metadata.outputs.package_name }}
      mypy_params: ${{ steps.project-metadata.outputs.mypy_params }}
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          # Checkout pull request HEAD commit to ignore actions/checkout's merge commit. Fallback to push SHA.
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          # We're going to browse all new commits.
          fetch-depth: 0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Project metadata
        id: project-metadata
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: >
          python -c "$(curl -fsSL
          https://raw.githubusercontent.com/kdeldycke/workflows/main/.github/metadata.py)"

  lint-python:
    needs:
      - project-metadata
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release' && needs.project-metadata.outputs.python_files
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry and Pylint
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Install project with Poetry
        # Install project with Poetry if supported, so we can avoid importing errors in Pylint reports.
        if: fromJSON(needs.project-metadata.outputs.is_poetry_project)
        run: |
          # Allows our Pylint version to access project's dependencies.
          poetry config virtualenvs.create false
          poetry install --no-interaction
      - name: Run Pylint
        # Docs:
        # http://pylint.pycqa.org/en/latest/technical_reference/features.html
        # --output-format=colorized
        #   Colorize output.
        # --jobs=0
        #   Use all available processors.
        # --max-line-length=88
        #   Aligns to black's config; See https://black.readthedocs.io/en/
        #   stable/guides/using_black_with_other_tools.html#pylint
        # --fail-under=8
        #   80% linter success is good enough.
        # --logging-format-style=new
        #   The type of string formatting that logging methods do. `old` means
        #   using % formatting, `new` is for `{}` formatting.
        # --recursive=y
        #   Let Pylint discovered all Python files and modules.
        run: >
          pylint
          --output-format=colorized
          --jobs=0
          --max-line-length=88
          --fail-under=7
          --logging-format-style=new
          --recursive=y .

  lint-python-types:
    needs:
      - project-metadata
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release' && needs.project-metadata.outputs.python_files
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry and Mypy
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Install project with Poetry
        # Install project with Poetry if supported, so we can benefits from dependencies on typing stubs.
        if: fromJSON(needs.project-metadata.outputs.is_poetry_project)
        run: |
          poetry install --no-interaction
      - name: Run Poetry's Mypy
        if: fromJSON(needs.project-metadata.outputs.is_poetry_project)
        run: >
          poetry run mypy ${{ needs.project-metadata.outputs.mypy_params }}
          ${{ needs.project-metadata.outputs.python_files }}
      - name: Run vanilla Mypy
        if: ${{ ! fromJSON(needs.project-metadata.outputs.is_poetry_project) }}
        run: >
          mypy ${{ needs.project-metadata.outputs.mypy_params }}
          ${{ needs.project-metadata.outputs.python_files }}

  lint-python-doc:
    needs:
      - project-metadata
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release' && needs.project-metadata.outputs.python_files
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install pydocstyle
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Run pydocstyle
        # Do not fail job on doc style errors. Linting docstrings is informative only.
        # Search in all directories, including those starting with a dot.
        run: |
          pydocstyle --match-dir='.*' --source --explain  || true

  lint-yaml:
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install yamllint
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Run yamllint
        run: |
          yamllint --strict --config-data "{rules: {line-length: {max: 120}}}" --format github .

  lint-zsh:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Install Zsh
        run: |
          sudo apt install --yes zsh
      - name: Lint
        run: |
          find . -iname "*.sh" -exec zsh --no-exec "{}" \;

  lint-awesome:
    name: Lint Awesome list
    if: startsWith(github.event.repository.name, 'awesome-')
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          # Fetch all history to please linter's age checks.
          fetch-depth: 0
      - run: |
          npx awesome-lint --version
          npx awesome-lint

  check-secrets:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          fetch-depth: '0'
      - uses: zricethezav/gitleaks-action@v2.3.1
        with:
          config-path: .github/gitleaks.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}