---
name: Lint
"on":
  workflow_call:
  push:
    branches:
      - main
  pull_request:

concurrency:
  # Group workflow jobs so new commits cancels in-progress execution triggered by previous commits.
  # Source: https://mail.python.org/archives/list/pypa-committers@python.org/thread/PCBCQMJF64JGRBOX7E2EE4YLKHT4DI55/
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:

  project-metadata:
    name: Project metadata
    runs-on: ubuntu-22.04
    outputs:
      python_files: ${{ steps.project-metadata.outputs.python_files }}
      is_poetry_project: ${{ steps.project-metadata.outputs.is_poetry_project }}
      package_name: ${{ steps.project-metadata.outputs.package_name }}
      ruff_params: ${{ steps.project-metadata.outputs.ruff_params }}
      mypy_params: ${{ steps.project-metadata.outputs.mypy_params }}
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          # Checkout pull request HEAD commit to ignore actions/checkout's merge commit. Fallback to push SHA.
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          # We're going to browse all new commits.
          fetch-depth: 0
      - uses: actions/setup-python@v4.6.1
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Project metadata
        id: project-metadata
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: >
          python -c "$(curl -fsSL
          https://raw.githubusercontent.com/kdeldycke/workflows/main/.github/metadata.py)"

  lint-python:
    needs:
      - project-metadata
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release' && needs.project-metadata.outputs.python_files
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.3
      - uses: actions/setup-python@v4.6.1
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Ruff
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Run Ruff
        # Runs with the default set of rules. Trust ruff to select a sensible subset.
        run: >
          ruff check --format=github ${{ needs.project-metadata.outputs.ruff_params }} .

  lint-python-types:
    needs:
      - project-metadata
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release' && needs.project-metadata.outputs.python_files
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.3
      - uses: actions/setup-python@v4.6.1
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry and Mypy
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Install project with Poetry
        # Install project with Poetry if supported, so we can benefits from dependencies on typing stubs.
        if: fromJSON(needs.project-metadata.outputs.is_poetry_project)
        run: |
          poetry install --no-interaction
      - name: Run Poetry's Mypy
        if: fromJSON(needs.project-metadata.outputs.is_poetry_project)
        run: >
          poetry run mypy ${{ needs.project-metadata.outputs.mypy_params }}
          ${{ needs.project-metadata.outputs.python_files }}
      - name: Run vanilla Mypy
        if: ${{ ! fromJSON(needs.project-metadata.outputs.is_poetry_project) }}
        # --color-output - Force colorized output as in CI, Mypy defaults to no color.
        run: >
          mypy --color-output ${{ needs.project-metadata.outputs.mypy_params }}
          ${{ needs.project-metadata.outputs.python_files }}

  lint-yaml:
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.3
      - uses: actions/setup-python@v4.6.1
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install yamllint
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Run yamllint
        run: |
          yamllint --strict --config-data "{rules: {line-length: {max: 120}}}" --format github .

  lint-zsh:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.3
      - name: Install Zsh
        run: |
          sudo apt update
          sudo apt install --yes zsh
      - name: Lint
        run: |
          find . -iname "*.sh" -exec zsh --no-exec "{}" \;

  lint-github-action:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.3
      - name: Install actionlint
        id: install_actionlint
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
      - name: Install shellcheck
        run: |
          sudo apt update
          sudo apt install --yes shellcheck
      - name: Install problem matcher
        # Source: https://github.com/rhysd/actionlint/blob/main/docs/usage.md#problem-matchers
        run: >
          curl -fsSL --output ./.github/labeller-file-based.yaml
          https://raw.githubusercontent.com/rhysd/actionlint/main/.github/actionlint-matcher.json
      - name: Register problem matcher
        run: |
          echo "::add-matcher::.github/labeller-file-based.yaml"
      - name: Run actionlint
        # XXX actionlint triggers this error:
        #   Error: .github/workflows/release.yaml:198:27:
        #   property "workflow_update_github_pat" is not defined in object type {actions_runner_debug: string;
        #   actions_step_debug: string; github_token: string; pypi_token: string} [expression]
        # See: https://github.com/rhysd/actionlint/issues/148
        run: >
          ${{ steps.install_actionlint.outputs.executable }}
          -color
          -ignore 'property "workflow_update_github_pat" is not defined in .+'

  broken-links:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.3
      - uses: lycheeverse/lychee-action@v1.8.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install hub
        run: |
          sudo apt install --yes hub
      - name: List open issues
        id: open_issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          echo "issues=$(
          hub issue
          --state open
          --creator "github-actions[bot]"
          --format $'%I %t\t'
          --sort created )" >> "$GITHUB_OUTPUT"
      - name: Print open issues
        run: |
          echo "Open issues: ${{ steps.open_issues.outputs.issues }}"
      - name: Filter issues
        id: issue_groups
        shell: python
        run: |
          import os
          from pathlib import Path

          open_issues = """${{ steps.open_issues.outputs.issues }}""".strip()

          last_issue = ""
          old_issues = set()

          for entry in open_issues.split("\t"):
              print(f"Processing {entry!r} ...")
              number, title = entry.split(" ", 1)
              if title != "Broken links":
                  print(f"{entry!r} is not a broken links issue, skip it.")
                  continue
              if not last_issue:
                  print(f"Issue #{number} is the last broken links open issue.")
                  last_issue = number
              else:
                  print(f"Issue #{number} is an old broken links open issue.")
                  old_issues.add(number)

          output = f"last_issue={last_issue}\n"
          output += f"old_issues={' '.join(old_issues)}\n"

          env_file = Path(os.getenv("GITHUB_OUTPUT"))
          env_file.write_text(output)
      - name: Print issue groups
        run: |
          echo "Last open issue: ${{ steps.issue_groups.outputs.last_issue }}"
          echo "Old open issues: ${{ steps.issue_groups.outputs.old_issues }}"
      - name: Get issue label
        id: get_label
        run: |
          echo "label=${{ startsWith(github.event.repository.name, 'awesome-') && 'ðŸ©¹ fix link' || 'ðŸ“š documentation' }}" >> "$GITHUB_OUTPUT"
      - name: Close old issues
        if: ${{ steps.issue_groups.outputs.old_issues }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for number in ${{ steps.issue_groups.outputs.old_issues }}; do
              hub issue update "$number" --state closed;
          done
      - name: Create or update issue
        if: env.lychee_exit_code != 0
        uses: peter-evans/create-issue-from-file@v4.0.1
        with:
          title: "Broken links"
          issue-number: ${{ steps.issue_groups.outputs.last_issue }}
          content-filepath: ./lychee/out.md
          labels: ${{ steps.get_label.outputs.label }}

  lint-awesome:
    name: Lint Awesome list
    if: startsWith(github.event.repository.name, 'awesome-')
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          # Fetch all history to please linter's age checks.
          fetch-depth: 0
      - run: |
          npx awesome-lint --version
          npx awesome-lint

  check-secrets:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2.3.2
        with:
          config-path: .github/gitleaks.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}