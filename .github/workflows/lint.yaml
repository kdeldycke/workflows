---
name: Lint
"on":
  workflow_call:
  push:
    branches:
      - main
  pull_request:

concurrency:
  # Group workflow jobs so new commits cancels in-progress execution triggered by previous commits.
  # Source: https://mail.python.org/archives/list/pypa-committers@python.org/thread/PCBCQMJF64JGRBOX7E2EE4YLKHT4DI55/
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:

  lint-python:
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.2.0
        with:
          python-version: "3.10"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install project with Poetry
        # If currrent project is Poetry-based, install the latter. That way we avoid import errors in Pylint reports.
        if: hashFiles('pyproject.toml') && hashFiles('poetry.lock')
        run: |
          python -m pip install --upgrade poetry
          # Allows our Pylint version to access project's dependencies.
          poetry config virtualenvs.create false
          poetry install --no-interaction
      - name: Install Pylint
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Run Pylint
        # Docs:
        # http://pylint.pycqa.org/en/latest/technical_reference/features.html
        # --output-format=colorized
        #   Colorize output.
        # --jobs=0
        #   Use all available processors.
        # --max-line-length=88
        #   Aligns to black's config; See https://black.readthedocs.io/en/
        #   stable/guides/using_black_with_other_tools.html#pylint
        # --fail-under=8
        #   80% linter success is good enough.
        # --logging-format-style=new
        #   The type of string formatting that logging methods do. `old` means
        #   using % formatting, `new` is for `{}` formatting.
        # --recursive=y
        #   Let Pylint discovered all Python files and modules.
        run: >
          pylint
          --output-format=colorized
          --jobs=0
          --max-line-length=88
          --fail-under=7
          --logging-format-style=new
          --recursive=y .

  lint-python-types:
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.2.0
        with:
          python-version: "3.10"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install project with Poetry
        # If currrent project is Poetry-based, install the latter, so we can benefits from additional typing stubs for
        # dependencies.
        if: hashFiles('pyproject.toml') && hashFiles('poetry.lock')
        run: |
          python -m pip install --upgrade poetry
          poetry install --no-interaction
      - name: Install Mypy
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: '*.py files found?'
        # XXX We couldn't use hashFiles() method as the later seems to be broken:
        # https://github.com/actions/runner/issues/449
        # https://github.com/actions/cache/issues/753
        # https://github.com/actions/toolkit/pull/1015
        uses: tj-actions/glob@v9.2
        id: glob
        with:
          files: |
            **/**.py
      - name: Run Mypy
        if: steps.glob.outputs.paths
        # TODO: add minimal Python version with "--python-version x.y" option.
        # See: https://github.com/python/mypy/issues/13294
        run: |
          mypy $(git ls-files '*.py')

  lint-python-doc:
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.2.0
        with:
          python-version: "3.10"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install pydocstyle
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Run pydocstyle
        # Do not fail job on doc style errors. Linting docstrings is informative only.
        # Search in all directories, including those starting with a dot.
        run: |
          pydocstyle --match-dir='.*' --source --explain  || true

  lint-yaml:
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.2.0
        with:
          python-version: "3.10"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install yamllint
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Run yamllint
        run: |
          yamllint --strict --config-data "{rules: {line-length: {max: 120}}}" --format github .

  lint-zsh:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install Zsh
        run: |
          sudo apt install --yes zsh
      - name: Lint
        run: |
          find . -iname "*.sh" -exec zsh --no-exec "{}" \;

  lint-awesome:
    name: Lint Awesome list
    if: startsWith(github.event.repository.name, 'awesome-')
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          # Fetch all history to please linter's age checks.
          fetch-depth: 0
      - run: |
          npx awesome-lint --version
          npx awesome-lint

  check-secrets:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: '0'
      - uses: zricethezav/gitleaks-action@v2.0.6
        with:
          config-path: .github/gitleaks.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}