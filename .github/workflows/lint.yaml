---
name: Lint
"on":
  workflow_call:
  push:
    branches-ignore:
      # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
      - prepare-release

jobs:

  lint-python:
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
      - uses: actions/setup-python@v3.0.0
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install project with Poetry
        # If currrent project is Poetry-based, install the latter. That way we avoid import errors in Pylint reports.
        if: hashFiles('pyproject.toml') && hashFiles('poetry.lock')
        run: |
          python -m pip install --upgrade poetry
          # Allows our Pylint version to access project's dependencies.
          poetry config virtualenvs.create false
          poetry install --no-interaction
      - name: Install Pylint
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v1.1.0/requirements.txt
      - name: Run Pylint
        # Docs:
        # http://pylint.pycqa.org/en/latest/technical_reference/features.html
        # --output-format=colorized
        #   Colorize output.
        # --jobs=0
        #   Use all available processors.
        # --max-line-length=88
        #   Aligns to black's config; See https://black.readthedocs.io/en/
        #   stable/guides/using_black_with_other_tools.html#pylint
        # --fail-under=8
        #   80% linter success is good enough.
        # --logging-format-style=new
        #   The type of string formatting that logging methods do. `old` means
        #   using % formatting, `new` is for `{}` formatting.
        # --recursive=y
        #   Let Pylint discovered all Python files and modules.
        run: >
          pylint
          --output-format=colorized
          --jobs=0
          --max-line-length=88
          --fail-under=8
          --logging-format-style=new
          --recursive=y .

  lint-yaml:
    # Skip linting on prepare-release branch as it points to a tagged URL that does not exist yet.
    if: github.head_ref != 'prepare-release'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
      - uses: actions/setup-python@v3.0.0
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install yamllint
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v1.1.0/requirements.txt
      - name: Run yamllint
        run: |
          yamllint --strict --config-data "{rules: {line-length: {max: 120}}}" --format github .

  lint-zsh:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
      - name: Install Zsh
        run: |
          sudo apt install -y zsh
      - name: Lint
        run: |
          find . -iname "*.sh" -exec zsh --no-exec "{}" \;

  lint-awesome:
    name: Lint Awesome list
    if: startsWith(github.event.repository.name, 'awesome-')
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
        with:
          # Fetch all history to please linter's age checks.
          fetch-depth: 0
      - run: |
          npx awesome-lint --version
          npx awesome-lint

  check-secrets:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
        with:
          fetch-depth: '0'
      - uses: zricethezav/gitleaks-action@v1.6.0
        with:
          config-path: .github/gitleaks.toml