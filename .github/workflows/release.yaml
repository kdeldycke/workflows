---
name: Build & release
# Read https://github.com/actions/runner/issues/491 for insights on complex workflow execution logic.
"on":
  workflow_call:
    secrets:
      PYPI_TOKEN:
        required: false
    outputs:
      tagged_version:
        description: Tagged/released version (without leading 'v')
        value: ${{ jobs.git-tag.outputs.tagged_version }}
  # Target are chosen so that all commits get a chance to have their build tested.
  push:
    branches:
      - main
  pull_request:

jobs:

  commit-matrix:
    name: List new and releases commits
    runs-on: ubuntu-22.04
    outputs:
        # There's a design issue with GitHub actions: matrix outputs are not cumulative. The last job wins.
        # See: https://github.community/t/bug-jobs-output-should-return-a-list-for-a-matrix-job/128626
        # So we will use this step to list all commits by category.
      new_commits_matrix: ${{ steps.new_commits_matrix.outputs.matrix }}
      release_commits_matrix: ${{ steps.release_commits_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          # Checkout pull request HEAD commit to ignore actions/checkout's merge commit. Fallback to push SHA.
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          # We're going to browse all new commits.
          fetch-depth: 0
      - name: List all branches
        run: |
          git branch --all
      - name: List all commits
        run: |
          git log --decorate=full --oneline
      - name: Get commit range
        id: commit_range
        # New commits needs to be fetched differently in push and pull_requests events. Sources:
        #   * https://stackoverflow.com/a/67204539
        #   * https://stackoverflow.com/a/62953566
        #   * https://stackoverflow.com/a/61861763
        run: |
          if [ $GITHUB_BASE_REF ]; then
            # Pull request event, for which we need to checkout the HEAD commit instead of the artificial merge commit.
            COMMIT_RANGE="origin/${{ github.base_ref }}..${{ github.event.pull_request.head.sha }}"
          else
            # Push event.
            COMMIT_RANGE="${{ github.event.before }}..${{ github.sha }}"
          fi
          echo "range=$COMMIT_RANGE" >> $GITHUB_OUTPUT
      - name: List new commits
        id: new_commits
        # Produce a unique delimiter to feed multilines content to "$GITHUB_OUTPUT" directive:
        # https://github.com/orgs/community/discussions/26288#discussioncomment-3876281
        run: |
          DELIMITER="ghadelimiter_$(openssl rand -hex 8)"
          COMMITS=$( git rev-list ${{ steps.commit_range.outputs.range }} -- )
          echo "commits<<$DELIMITER" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "$DELIMITER" >> $GITHUB_OUTPUT
      - name: List release commits
        id: release_commits
        # Same as new_commits step, but with "--grep" option.
        run: |
          DELIMITER="ghadelimiter_$(openssl rand -hex 8)"
          COMMITS=$( \
            git rev-list -E --grep="^\[changelog\] Release v[0-9]+\.[0-9]+\.[0-9]+$" \
            ${{ steps.commit_range.outputs.range }} -- )
          echo "commits<<$DELIMITER" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "$DELIMITER" >> $GITHUB_OUTPUT
      - name: Print commits
        run: |
          echo -e "New commits:\n${{ steps.new_commits.outputs.commits }}"
          echo "---"
          echo -e "Release commits:\n${{ steps.release_commits.outputs.commits }}"
      - name: Create JSON new commits matrix
        id: new_commits_matrix
        if: steps.new_commits.outputs.commits
        # Source: https://stackoverflow.com/a/44477891
        run: >
          echo "matrix=$(
          echo '${{ steps.new_commits.outputs.commits }}'
          | jq -R -s -c 'split("\n") | map(select(length > 0)) | {commit: .}'
          )" >> $GITHUB_OUTPUT
      - name: Create JSON release commits matrix
        id: release_commits_matrix
        if: steps.release_commits.outputs.commits
        run: >
          echo "matrix=$(
          echo '${{ steps.release_commits.outputs.commits }}'
          | jq -R -s -c 'split("\n") | map(select(length > 0)) | {commit: .}'
          )" >> $GITHUB_OUTPUT
      - name: Print JSON of new commits
        # Print raw string and parsed JSON.
        run: |
          echo '${{ steps.new_commits_matrix.outputs.matrix }}'
          jq -aR <<< echo '${{ steps.new_commits_matrix.outputs.matrix }}'
      - name: Print JSON of release commits
        run: |
          echo '${{ steps.release_commits_matrix.outputs.matrix }}'
          jq -aR <<< echo '${{ steps.release_commits_matrix.outputs.matrix }}'

  python-metadata:
    name: Python metadata
    runs-on: ubuntu-22.04
    outputs:
      is_poetry_project: ${{ steps.python-metadata.outputs.is_poetry_project }}
      package_name: ${{ steps.python-metadata.outputs.package_name }}
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: actions/setup-python@v4.3.0
        with:
          python-version: "3.10"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Python metadata
        id: python-metadata
        run: >
          python -c "$(curl -fsSL
          https://raw.githubusercontent.com/kdeldycke/workflows/main/.github/python_metadata.py)"

  poetry-build:
    name: "Poetry: build & check package"
    needs:
      - commit-matrix
      - python-metadata
    if: fromJSON(needs.python-metadata.outputs.is_poetry_project)
    strategy:
      matrix: ${{ fromJson(needs.commit-matrix.outputs.new_commits_matrix) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Print target commit
        run: |
          echo "${{ matrix.commit }}"
      - uses: actions/checkout@v3.1.0
        with:
          ref: ${{ matrix.commit }}
      - uses: actions/setup-python@v4.3.0
        with:
          python-version: "3.10"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install poetry, twine and check-wheel-contents
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Build package
        run: |
          poetry install --no-interaction --no-ansi
          poetry build --no-interaction --no-ansi
      - name: Artifacts for GitHub release
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ github.event.repository.name }}-build-${{ matrix.commit }}
          path: ./dist/*
      - name: Validates package metadata
        run: |
          poetry check --no-interaction --no-ansi
          poetry run twine check ./dist/*
          poetry run check-wheel-contents ./dist/*.whl
      - name: Test publishing
        run: |
          poetry publish --dry-run --no-interaction

  git-tag:
    name: Tag release
    needs:
      - commit-matrix
    # Only consider pushes to main branch as triggers for releases.
    if: github.ref == 'refs/heads/main' && needs.commit-matrix.outputs.release_commits_matrix
    strategy:
      matrix: ${{ fromJson(needs.commit-matrix.outputs.release_commits_matrix) }}
    runs-on: ubuntu-22.04
    outputs:
      tagged_version: ${{ steps.get_version.outputs.tagged_version }}
    steps:
      - name: Print release commit
        run: |
          echo "${{ matrix.commit }}"
      - uses: actions/checkout@v3.1.0
        with:
          ref: ${{ matrix.commit }}
      - name: Extract version
        id: get_version
        run: >
          echo "tagged_version=$( grep "current_version = " ./.bumpversion.cfg | cut -d ' ' -f 3 )" >> $GITHUB_OUTPUT
      - name: Print version
        run: |
          echo "Tagged version: ${{ steps.get_version.outputs.tagged_version }}"
      - id: tag_exists
        run: |
          echo "tag_exists=$(
          git show-ref --tags "v${{ steps.get_version.outputs.tagged_version }}" --quiet )" >> $GITHUB_OUTPUT
      - name: Tag search results
        run: |
          echo "Does tag exist? ${{ steps.tag_exists.outputs.tag_exists && true || false }}"
      - name: Push tag
        # If for whatever reason the workflow is re-run because it failed the first time, just
        # skip the tag creation if it already exists.
        if: ${{ ! steps.tag_exists.outputs.tag_exists }}
        uses: tvdias/github-tagger@v0.0.2
        with:
          repo-token: ${{ secrets.WORKFLOW_UPDATE_GITHUB_PAT || secrets.GITHUB_TOKEN }}
          tag: v${{ steps.get_version.outputs.tagged_version }}
          commit-sha: ${{ matrix.commit }}

  pypi-publish:
    name: Publish to PyPi
    needs:
      - commit-matrix
      - python-metadata
      - poetry-build
      - git-tag
    if: needs.python-metadata.outputs.package_name
    strategy:
      matrix: ${{ fromJson(needs.commit-matrix.outputs.release_commits_matrix) }}
    runs-on: ubuntu-22.04
    outputs:
      release_text: ${{ steps.generate_text.outputs.release_text }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3.0.1
        id: download
        with:
          name: ${{ github.event.repository.name }}-build-${{ matrix.commit }}
      - name: Push package to public PyPi repository
        uses: pypa/gh-action-pypi-publish@v1.5.1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: ${{ steps.download.outputs.download-path }}
      - name: Generate release text
        id: generate_text
        run: >
          echo "release_text=[🐍
          Available on PyPi](https://pypi.org/project/${{ needs.python-metadata.outputs.package_name }}/${{
          needs.git-tag.outputs.tagged_version }})" >> $GITHUB_OUTPUT

  github-release:
    name: Publish GitHub release
    needs:
      - commit-matrix
      - git-tag
      - pypi-publish
    # Make sure this job always starts if git-tag ran and succeeded.
    if: always() && needs.git-tag.result == 'success'
    strategy:
      matrix: ${{ fromJson(needs.commit-matrix.outputs.release_commits_matrix) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Download build artifacts
        # Do not try to fetch build artifacts if the publishing step has been skipped.
        if: needs.pypi-publish.result != 'skipped'
        uses: actions/download-artifact@v3.0.1
        id: download
        with:
          name: ${{ github.event.repository.name }}-build-${{ matrix.commit }}
      - name: Create a release on GitHub
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.git-tag.outputs.tagged_version }}
          target_commitish: ${{ matrix.commit }}
          files: ${{ steps.download.outputs.download-path }}/*
          body: |
            ${{ needs.pypi-publish.outputs.release_text }}
