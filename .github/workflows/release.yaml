---
name: Build & release
# Read https://github.com/actions/runner/issues/491 for insights on complex workflow execution logic.
"on":
  workflow_call:
    secrets:
      PYPI_TOKEN:
        required: false
    outputs:
      tagged_version:
        description: Tagged/released version (without leading 'v')
        value: ${{ jobs.git-tag.outputs.tagged_version }}
      bin_name:
        description: File name of the binary produced by the build and uploaded as an artefact
        value: ${{ jobs.compile-binaries.outputs.bin_name }}
  # Target are chosen so that all commits get a chance to have their build tested.
  push:
    branches:
      - main
  pull_request:

jobs:

  project-metadata:
    name: Project metadata
    runs-on: ubuntu-22.04
    outputs:
      # There's a design issue with GitHub actions: matrix outputs are not cumulative. The last job wins
      # (see: https://github.community/t/bug-jobs-output-should-return-a-list-for-a-matrix-job/128626).
      # This means in a graph of jobs, a matrix-based one is terminal, and cannot be depended on. Same goes for
      # (reuseable) workflows. We use this preliminary job to produce all matrix we need to trigger depending jobs
      # over the dimensions.
      new_commits_matrix: ${{ steps.project-metadata.outputs.new_commits_matrix }}
      release_commits_matrix: ${{ steps.project-metadata.outputs.release_commits_matrix }}
      # Export Python project metadata.
      nuitka_entry_points: ${{ steps.project-metadata.outputs.nuitka_entry_points }}
      is_poetry_project: ${{ steps.project-metadata.outputs.is_poetry_project }}
      package_name: ${{ steps.project-metadata.outputs.package_name }}
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          # Checkout pull request HEAD commit to ignore actions/checkout's merge commit. Fallback to push SHA.
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          # We're going to browse all new commits.
          fetch-depth: 0
      - name: List all branches
        run: |
          git branch --all
      - name: List all commits
        run: |
          git log --decorate=full --oneline
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v2.2.2/requirements.txt
      - name: Project metadata
        id: project-metadata
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: >
          python -c "$(curl -fsSL
          https://raw.githubusercontent.com/kdeldycke/workflows/v2.2.2/.github/metadata.py)"

  poetry-build:
    name: "Poetry: build & check package"
    needs:
      - project-metadata
    if: fromJSON(needs.project-metadata.outputs.is_poetry_project)
    strategy:
      matrix: ${{ fromJSON(needs.project-metadata.outputs.new_commits_matrix) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Print target commit
        run: |
          echo "${{ matrix.commit }}"
      - uses: actions/checkout@v3.3.0
        with:
          ref: ${{ matrix.commit }}
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install poetry, twine and check-wheel-contents
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v2.2.2/requirements.txt
      - name: Build package
        run: |
          poetry install --no-interaction --no-ansi
          poetry build --no-interaction --no-ansi
      - name: Shorten SHA
        shell: python
        id: build-metadata
        run: |
          import os
          from pathlib import Path

          # Truncate commit ref for readability.
          short_sha = "${{ matrix.commit }}"[:7]

          print(f"Short SHA: {short_sha}")
          env_file = Path(os.getenv("GITHUB_OUTPUT"))
          env_file.write_text(f"short_sha={short_sha}")
      - name: Artifacts for GitHub release
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ github.event.repository.name }}-build-${{ steps.build-metadata.outputs.short_sha }}
          path: ./dist/*
      - name: Validates package metadata
        run: |
          poetry check --no-interaction --no-ansi
          poetry run twine check ./dist/*
          poetry run check-wheel-contents ./dist/*.whl
      - name: Test publishing
        run: |
          poetry publish --dry-run --no-interaction

  compile-binaries:
    name: "Nuitka: generate binaries"
    needs:
      - project-metadata
    if: needs.project-metadata.outputs.nuitka_entry_points
    strategy:
      matrix:
        commit: ${{ fromJSON(needs.project-metadata.outputs.new_commits_matrix).commit }}
        entry_point: ${{ fromJSON(needs.project-metadata.outputs.nuitka_entry_points).entry_point }}
        os:
          - ubuntu-22.04
          - macos-12
          - windows-2022
        arch:
          - x64
          # XXX There is no GitHub-hosted macOS runners with Apple silicon yet. See:
          # https://github.com/github/roadmap/issues/528
          # https://github.com/actions/runner-images/issues/2187
          # https://github.com/actions/runner/issues/805
          # - arm64
        include:
          - os: ubuntu-22.04
            platform: linux
            extension: bin
            extra_python_params:
          - os: macos-12
            platform: macos
            extension: bin
            extra_python_params:
          - os: windows-2022
            platform: windows
            extension: exe
            # XXX "-X utf8" parameter is a workaround for Windows runners redirecting the output of commands to files.
            # See:
            # https://github.com/databrickslabs/dbx/issues/455#issuecomment-1312770919
            # https://github.com/pallets/click/issues/2121#issuecomment-1312773882
            # https://gist.github.com/NodeJSmith/e7e37f2d3f162456869f015f842bcf15
            # https://github.com/Nuitka/Nuitka/blob/ca1ec9e8e10b51d187b589f1d33935c4ed558687/nuitka/utils/ReExecute.py#L73-L74
            extra_python_params: "-X utf8"
    runs-on: ${{ matrix.os }}
    outputs:
      bin_name: ${{ steps.build-metadata.outputs.bin_name }}
    steps:
      - name: Print build target
        run: |
          echo "${{ matrix }}"
      - uses: actions/checkout@v3.3.0
        with:
          ref: ${{ matrix.commit }}
      - uses: actions/setup-python@v4.4.0
        with:
          # XXX Nuitka is not ready for Python 3.11 yet.
          python-version: "3.10"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v2.2.2/requirements.txt
      - name: Re-install Nuitka in Poetry venv
        # Nuitka needs to be installed within Poetry's venv to allow for lots of workarounds.
        # Additional dependencies:
        #   - ordered-set: used by Nuitka for compilation performance
        #   - zstandard: for nuitka's onefile compression
        run: >
          poetry run python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v2.2.2/requirements.txt
      - name: Nuitka + compilers versions
        run: |
          poetry run python -m nuitka --version
      - name: Install package
        run: |
          poetry install --no-interaction --no-ansi
      - name: Generate bin name
        id: build-metadata
        shell: python
        run: |
          import os
          from pathlib import Path

          # Truncate commit ref for readability.
          short_sha = "${{ matrix.commit }}"[:7]

          cli_id, main_module = "${{ matrix.entry_point }}".split(":", 1)

          bin_name = (
              cli_id +
              "_${{ matrix.platform }}_${{ matrix.arch }}" +
              "-build-" +
              short_sha +
              ".${{ matrix.extension }}"
          )

          print(f"Binary file name: {bin_name}")
          print(f"Main module path: {main_module}")

          env_file = Path(os.getenv("GITHUB_OUTPUT"))
          env_file.write_text("\n".join((
              f"bin_name={bin_name}",
              f"main_module={main_module}"
          )))
      - name: Build binary within Poetry venv
        run: >
          poetry run python ${{ matrix.extra_python_params }} -m nuitka
          --onefile
          --assume-yes-for-downloads
          --nofollow-import-to=*.tests
          --output-filename=${{ steps.build-metadata.outputs.bin_name }}
          ${{ steps.build-metadata.outputs.main_module }}
      - name: Upload binaries
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ steps.build-metadata.outputs.bin_name }}
          if-no-files-found: error
          path: ${{ steps.build-metadata.outputs.bin_name }}

  git-tag:
    name: Tag release
    needs:
      - project-metadata
    # Only consider pushes to main branch as triggers for releases.
    if: github.ref == 'refs/heads/main' && needs.project-metadata.outputs.release_commits_matrix
    strategy:
      matrix: ${{ fromJSON(needs.project-metadata.outputs.release_commits_matrix) }}
    runs-on: ubuntu-22.04
    outputs:
      tagged_version: ${{ steps.get_version.outputs.tagged_version }}
    steps:
      - name: Print release commit
        run: |
          echo "${{ matrix.commit }}"
      - uses: actions/checkout@v3.3.0
        with:
          ref: ${{ matrix.commit }}
      - name: Extract version
        id: get_version
        run: >
          echo "tagged_version=$( grep "current_version = " ./.bumpversion.cfg | cut -d ' ' -f 3 )" >> $GITHUB_OUTPUT
      - name: Print version
        run: |
          echo "Tagged version: ${{ steps.get_version.outputs.tagged_version }}"
      - id: tag_exists
        run: |
          echo "tag_exists=$(
          git show-ref --tags "v${{ steps.get_version.outputs.tagged_version }}" --quiet )" >> $GITHUB_OUTPUT
      - name: Tag search results
        run: |
          echo "Does tag exist? ${{ steps.tag_exists.outputs.tag_exists && true || false }}"
      - name: Push tag
        # If for whatever reason the workflow is re-run because it failed the first time, just
        # skip the tag creation if it already exists.
        if: ${{ ! steps.tag_exists.outputs.tag_exists }}
        uses: tvdias/github-tagger@v0.0.2
        with:
          repo-token: ${{ secrets.WORKFLOW_UPDATE_GITHUB_PAT || secrets.GITHUB_TOKEN }}
          tag: v${{ steps.get_version.outputs.tagged_version }}
          commit-sha: ${{ matrix.commit }}

  pypi-publish:
    name: Publish to PyPi
    needs:
      - project-metadata
      - poetry-build
      - git-tag
    if: needs.project-metadata.outputs.package_name
    strategy:
      matrix: ${{ fromJSON(needs.project-metadata.outputs.release_commits_matrix) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Shorten SHA
        shell: python
        id: build-metadata
        run: |
          import os
          from pathlib import Path

          # Truncate commit ref for readability.
          short_sha = "${{ matrix.commit }}"[:7]

          print(f"Short SHA: {short_sha}")
          env_file = Path(os.getenv("GITHUB_OUTPUT"))
          env_file.write_text(f"short_sha={short_sha}")
      - name: Download build artifacts
        uses: actions/download-artifact@v3.0.2
        id: download
        with:
          name: ${{ github.event.repository.name }}-build-${{ steps.build-metadata.outputs.short_sha }}
      - name: Push package to public PyPi repository
        uses: pypa/gh-action-pypi-publish@v1.6.4
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: ${{ steps.download.outputs.download-path }}

  github-release:
    name: Publish GitHub release
    needs:
      - project-metadata
      - compile-binaries
      - git-tag
      - pypi-publish
    # Make sure this job always starts if git-tag ran and succeeded.
    if: always() && needs.git-tag.result == 'success'
    strategy:
      matrix: ${{ fromJSON(needs.project-metadata.outputs.release_commits_matrix) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Shorten SHA
        shell: python
        id: build-metadata
        run: |
          import os
          from pathlib import Path

          # Truncate commit ref for readability.
          short_sha = "${{ matrix.commit }}"[:7]

          print(f"Short SHA: {short_sha}")
          env_file = Path(os.getenv("GITHUB_OUTPUT"))
          env_file.write_text(f"short_sha={short_sha}")
      - name: Download artefacts
        # Do not try to fetch build artifacts if any of the job producing them was skipped.
        if: needs.pypi-publish.result != 'skipped' || needs.compile-binaries.result != 'skipped'
        uses: actions/download-artifact@v3.0.2
        id: artefacts
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.git-tag.outputs.tagged_version }}
          target_commitish: ${{ matrix.commit }}
          # Only download artefacts produced from the release commit.
          files: |
            ${{ steps.artefacts.outputs.download-path }}/*-build-${{ steps.build-metadata.outputs.short_sha }}*/*
          body: |
            [🐍 Available on PyPi](https://pypi.org/project/${{ needs.project-metadata.outputs.package_name }}/${{
            needs.git-tag.outputs.tagged_version }})