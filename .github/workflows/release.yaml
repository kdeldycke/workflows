---
name: Build & release
# Read https://github.com/actions/runner/issues/491 for insights on complex workflow execution logic.
"on":
  workflow_call:
    secrets:
      PYPI_TOKEN:
        required: false
    outputs:
      tagged_version:
        description: Tagged/released version (without leading 'v')
        value: ${{ jobs.git-tag.outputs.tagged_version }}
  # Target are chosen so that all commits get a chance to have their build tested.
  push:
    branches:
      - main
  pull_request:

jobs:

  commit-matrix:
    name: List new commits
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          # Checkout pull request HEAD commit to ignore actions/checkout's merge commit. Fallback to push SHA.
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          # We're going to browse all new commits.
          fetch-depth: 0
      - name: List all branches
        run: |
          git branch --all
      - name: List all commits
        run: |
          git log --decorate=full --oneline
      - name: List new commits
        id: new_commits
        # New commits needs to be fetched differently in push and pull_requests events. Sources:
        #   * https://stackoverflow.com/a/67204539
        #   * https://stackoverflow.com/a/62953566
        #   * https://stackoverflow.com/a/61861763
        # There is also a trick here to encode "\n" before using "::set-output" directive:
        # https://github.community/t/set-output-truncates-multiline-strings/16852/3
        run: |
          if [ $GITHUB_BASE_REF ]; then
            # Pull request event, for which we need to checkout the HEAD commit instead of the artificial merge commit.
            NEW_COMMITS=$( git rev-list ${{ github.base_ref }}..${{ github.event.pull_request.head.sha }} )
          else
            # Push event.
            NEW_COMMITS=$( git rev-list ${{ github.event.before }}..${{ github.sha }} )
          fi
          NEW_COMMITS="${NEW_COMMITS//$'\n'/'%0A'}"
          echo "::set-output name=commits::$NEW_COMMITS"
      - name: Print new commits
        run: |
          echo "New commits: ${{ steps.new_commits.outputs.commits }}"
      - name: Create JSON matrix
        id: generate_matrix
        # Source: https://stackoverflow.com/a/44477891
        run: >
          echo "::set-output name=matrix::$(
          echo '${{ steps.new_commits.outputs.commits }}'
          | jq -R -s -c 'split("\n") | map(select(length > 0)) | {commit: .}'
          )"
      - name: Print JSON of new commits
        # Print raw string and parsed JSON.
        run: |
          echo '${{ steps.generate_matrix.outputs.matrix }}'
          jq -aR <<< echo '${{ steps.generate_matrix.outputs.matrix }}'

  test-matrix:
    name: Run job on ${{ matrix.commit }} commit
    runs-on: ubuntu-20.04
    needs: commit-matrix
    strategy:
      matrix: ${{ fromJson(needs.commit-matrix.outputs.matrix) }}
    steps:
      - name: Print target commit
        run: |
          echo "${{ matrix.commit }}"
      - uses: actions/checkout@v2
        with:
          ref: ${{ matrix.commit }}
      - name: List all branches
        run: |
          git branch --all
      - name: List previous commits
        run: |
          git log --decorate=full --oneline

  is-poetry-based:
    name: Is project Poetry-based?
    runs-on: ubuntu-20.04
    outputs:
      is_poetry: ${{ steps.poetry_detection.outputs.is_poetry }}
    steps:
      - uses: actions/checkout@v2.4.0
      - id: poetry_detection
        run: |
          echo "::set-output name=is_poetry::$( [[ -f 'pyproject.toml' && -f 'poetry.lock' ]] && echo 'true' )"
      - name: Detection results
        run: |
          echo "${{ steps.poetry_detection.outputs.is_poetry }}"

  poetry-build:
    name: "Poetry: build & check package"
    needs:
      - is-poetry-based
      - commit-matrix
    if: needs.is-poetry-based.outputs.is_poetry
    strategy:
      matrix: ${{ fromJson(needs.commit-matrix.outputs.matrix) }}
    runs-on: ubuntu-20.04
    steps:
      - name: Print target commit
        run: |
          echo "${{ matrix.commit }}"
      - uses: actions/checkout@v2.4.0
        with:
          ref: ${{ matrix.commit }}
      - uses: actions/setup-python@v2.3.1
      - name: Install pip and Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
      - name: Build package
        run: |
          poetry install --no-interaction --no-ansi
          poetry build --no-interaction --no-ansi
      - name: Artefacts for GitHub release
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{ github.event.repository.name }}-builds-${{ matrix.commit }}
          path: ./dist/*
      - name: Install twine and check-wheel-contents
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Validates package metadata
        run: |
          poetry check --no-interaction --no-ansi
          poetry run twine check ./dist/*
          poetry run check-wheel-contents ./dist/*.whl
      - name: Test publishing
        run: |
          poetry publish --dry-run --no-interaction

  is-release-commit:
    name: Is commit a release?
    needs: commit-matrix
    # Only consider pushes to main branch as triggers for releases.
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{ fromJson(needs.commit-matrix.outputs.matrix) }}
    runs-on: ubuntu-20.04
    outputs:
      release_commit: ${{ steps.release_detection.outputs.release_commit }}
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          ref: ${{ matrix.commit }}
      - name: Print commit message
        run: |
          git log ${{ matrix.commit }} --max-count=1 --format=%s
      - id: release_detection
        run: >
          echo "::set-output name=release_commit::$(
          git log ${{ matrix.commit }} --max-count=1 --format=%s
          | grep --quiet -E "^\[changelog\] Release v\d+\.\d+\.\d+$" && echo "${{ matrix.commit }}"
          )"
      - name: Detection results
        run: |
          echo "${{ steps.release_detection.outputs.release_commit }}"

  git-tag:
    name: Tag release
    needs:
      - is-release-commit
    if: ${{ needs.is-release-commit.release_commit }}
    runs-on: ubuntu-20.04
    outputs:
      tagged_version: ${{ steps.get_version.outputs.tagged_version }}
    steps:
      - name: Print release commit
        run: |
          echo "${{ needs.is-release-commit.release_commit }}"
      - uses: actions/checkout@v2.4.0
        with:
          ref: ${{ needs.is-release-commit.release_commit }}
      - name: Extract version
        id: get_version
        run: |
          echo "::set-output name=tagged_version::$( grep "current_version = " ./.bumpversion.cfg | cut -d ' ' -f 3 )"
      - name: Print version
        run: |
          echo "Tagged version: ${{ steps.get_version.outputs.tagged_version }}"
      - name: Push tag
        uses: tvdias/github-tagger@v0.0.2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.get_version.outputs.tagged_version }}
          commit-sha: ${{ needs.is-release-commit.release_commit }}

  pypi-publish:
    name: Publish to PyPi
    needs:
      - poetry-build
      - is-release-commit
      - git-tag
    runs-on: ubuntu-20.04
    outputs:
      release_text: ${{ steps.generate_text.outputs.release_text }}s
    steps:
      - name: Download build artefacts
        uses: actions/download-artifact@v2.1.0
        id: download
        with:
          name: ${{ github.event.repository.name }}-builds-${{ needs.is-release-commit.release_commit }}
      - name: Push package to public PyPi repository
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: ${{ steps.download.outputs.download-path }}
      - name: Generate release text
        id: generate_text
        run: >
          echo "::set-output name=release_text::[üêç
          Available on PyPi](https://pypi.org/project/meta-package-manager/${{
          needs.git-tag.outputs.tagged_version }})"

  github-release:
    name: Publish GitHub release
    needs:
      - is-release-commit
      - git-tag
      - pypi-publish
      # - *-publish
    # Make sure this job always start if git-tag is ran and succeed.
    if: always() && needs.git-tag.result == 'success'
    runs-on: ubuntu-20.04
    steps:
      - name: Download build artefacts
        # Do not try to fetch build artefacts if the publishing step has been skipped.
        if: needs.pypi-publish.result != 'skipped'
        uses: actions/download-artifact@v2.1.0
        id: download
        with:
          name: ${{ github.event.repository.name }}-builds-${{ needs.is-release-commit.release_commit }}
      - name: Create a release on GitHub
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.git-tag.outputs.tagged_version }}
          target_commitish: ${{ needs.is-release-commit.release_commit }}
          files: ${{ steps.download.outputs.download-path }}
          body: |
            ${{ needs.pypi-publish.outputs.release_text }}