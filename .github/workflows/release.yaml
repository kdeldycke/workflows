---
name: Build & release
"on":
  workflow_call:
    outputs:
      tagged_version:
        description: Tagged/released version (without leading 'v')
        value: ${{ jobs.git-tag.outputs.tagged_version }}
  push:
  pull_request:

jobs:

  is-poetry-based:
    name: Is project based on Poetry?
    runs-on: ubuntu-20.04
    outputs:
      is_poetry: ${{ steps.poetry_detection.outputs.is_poetry }}
    steps:
      - uses: actions/checkout@v2.4.0
      - id: poetry_detection
        run: |
          echo "::set-output name=is_poetry::$( [[ -f "pyproject.toml" && -f "poetry.lock" ]] && 1 || 0 )"

  poetry-build:
    name: Build and check package via Poetry
    needs: is-poetry-based
    if: needs.is-poetry-based.outputs.is_poetry
    runs-on: ubuntu-20.04
    steps:
      - uses: crazy-max/ghaction-dump-context@v1.2.0
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-python@v2.3.1
      - name: Install pip and Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
      - name: Build package
        run: |
          poetry install --no-interaction --no-ansi
          poetry build --no-interaction --no-ansi
      - name: Artefacts for GitHub release
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{ github.event.repository.name }}-builds
          path: ./dist/*
      - name: Install twine and check-wheel-contents
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v0.7.0/requirements.txt
      - name: Validates package metadata
        run: |
          poetry check --no-interaction --no-ansi
          poetry run twine check ./dist/*
          poetry run check-wheel-contents ./dist/*.whl
      - name: Test publishing
        run: |
          poetry publish --dry-run --no-interaction

  git-tag:
    name: Tag release
    # Creates a git tag when the prepare-release PR has been merged to main branch.
    if: github.head_ref == 'prepare-release' && github.event.pull_request.merged
    runs-on: ubuntu-20.04
    outputs:
      tagged_version: ${{ steps.get_version.outputs.tagged_version }}
    steps:
      - uses: crazy-max/ghaction-dump-context@v1.2.0
      - uses: actions/checkout@v2.4.0
      - name: Extract version
        id: get_version
        # Docs: https://docs.github.com/en/actions/learn-github-actions
        # /workflow-commands-for-github-actions#setting-an-output-parameter
        run: |
          echo "::set-output name=tagged_version::$( grep "current_version = " ./.bumpversion.cfg | cut -d ' ' -f 3 )"
      - name: Print version
        run: |
          echo "Tagged version: ${{ steps.get_version.outputs.tagged_version }}"
      - name: Push tag
        uses: tvdias/github-tagger@v0.0.2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          tag: v${{ steps.get_version.outputs.tagged_version }}

  post-release-version-bump:
    name: Post-release version bump
    needs: git-tag
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          # WORKFLOW_UPDATE_GITHUB_PAT is a custom token created from my user's profile via the
          # "Developer Settings > Personal Access Tokens" UI to allow this job to update its own workflows. This is
          # only used on the original kdeldycke/workflows repository, hence the fallback to default GitHub token.
          token: ${{ secrets.WORKFLOW_UPDATE_GITHUB_PAT || secrets.GITHUB_TOKEN }}
      - uses: actions/setup-python@v2.2.2
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install bumpversion
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v0.7.0/requirements.txt
      - name: Re-target main branch in workflows
        # This step is only used in the original repository to automate remote URL tagging.
        if: github.repository == 'kdeldycke/workflows'
        # XXX Ideally, this step should have been encoded into .bumpversion.cfg configuration.
        # Default branch is set in a variable as a hack to prevent bumpversion to modify its own invocation.
        run: >
          DEFAULT_BRANCH="main" && bumpversion --verbose --no-configured-files
          --search "/workflows/v{current_version}/"
          --replace "/workflows/$DEFAULT_BRANCH/"
          no-bump
          `grep --files-with-matches "/workflows/v${{ needs.git-tag.outputs.tagged_version }}/"
          ./.github/workflows/*.yaml`
      - name: Add new changelog entry
        run: >
          python -c "$(curl -fsSL
          https://raw.githubusercontent.com/kdeldycke/workflows/v0.7.0/.github/update_changelog.py)"
      - name: Version bump
        run: |
          bumpversion --verbose patch
      - uses: stefanzweifel/git-auto-commit-action@v4.12.0
        with:
          commit_message: "[changelog] Post-release version bump"
          branch: main

  pypi-publish:
    name: Publish package to PyPi
    needs:
      - git-tag
      - poetry-build
    runs-on: ubuntu-20.04
    steps:
      - name: Download build artefacts
        uses: actions/download-artifact@v2.1.0
        id: download
        with:
          name: ${{ github.event.repository.name }}-builds
      - name: Push package to public PyPi repository
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: ${{ steps.download.outputs.download-path }}
      - name: Generate release text
        run: >
          echo "::set-output name=release-text::[üêç
          Available on PyPi](https://pypi.org/project/meta-package-manager/${{
          needs.git-tag.outputs.tagged_version }})"

  github-release:
    needs:
      - pypi-publish
      # - *-publish
    runs-on: ubuntu-20.04
    steps:
      - name: Download build artefacts
        uses: actions/download-artifact@v2.1.0
        id: download
        with:
          name: ${{ github.event.repository.name }}-builds
      - name: Create a release on GitHub
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.git-tag.outputs.tagged_version }}
          files: ${{ steps.download.outputs.download-path }}
          body: |
            ${{ needs.pypi-publish.outputs.release-text }}