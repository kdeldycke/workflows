---
name: Docs
"on":
  workflow_call:
    inputs:
      dependency-graph-output:
        description: 'Location in the repository of the dependency graph image'
        default: './docs/images/dependencies.png'
        required: false
        type: string
  push:
    branches:
      - main
    # Triggers on tags for dependency graph updates.
    tags:

concurrency:
  # Group workflow jobs so new commits cancels in-progress execution triggered by previous commits.
  # Source: https://mail.python.org/archives/list/pypa-committers@python.org/thread/PCBCQMJF64JGRBOX7E2EE4YLKHT4DI55/
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:

  autofix-typo:
    name: Fix typos
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.2.0
      - uses: sobolevn/misspell-fixer-action@0.1.0
      - uses: peter-evans/create-pull-request@v4.2.3
        with:
          # WORKFLOW_UPDATE_GITHUB_PAT is a custom token created from my user's profile via the
          # "Developer Settings > Personal Access Tokens" UI to allow this job to update its own workflows. This is
          # only used on the original kdeldycke/workflows repository, hence the fallback to default GitHub token.
          token: ${{ secrets.WORKFLOW_UPDATE_GITHUB_PAT || secrets.GITHUB_TOKEN }}
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Typo"
          title: "[autofix] Typo"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`docs.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/docs.yaml) workflow.


            </details>
          labels: "ðŸ“š documentation"
          branch: autofix-typo

  optimize-images:
    name: Optimize images
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.2.0
      - uses: calibreapp/image-actions@1.1.0
        id: image_actions
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          compressOnly: true
      - uses: peter-evans/create-pull-request@v4.2.3
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Optimize images"
          title: "[autofix] Optimize images"
          body: >
            ${{ steps.image_actions.outputs.markdown }}


            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`docs.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/docs.yaml) workflow.


            </details>
          labels: "ðŸ“š documentation"
          branch: optimize-images

  check-mailmap:
    name: Does .mailmap exist?
    runs-on: ubuntu-22.04
    outputs:
      exists: ${{ steps.detection.outputs.exists }}
    steps:
      - uses: actions/checkout@v3.2.0
      - id: detection
        run: |
          echo "exists=$( [[ -f './.mailmap' ]] && echo 'true' )" >> $GITHUB_OUTPUT
      - name: Detection results
        run: |
          echo "Does .mailmap exist at root? ${{ steps.detection.outputs.exists && true || false  }}"

  update-mailmap:
    name: Update .mailmap
    needs:
      - check-mailmap
    # Only update mailmap if a file is found at the root of repository.
    if: needs.check-mailmap.outputs.exists
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.2.0
        with:
          # Fetch all history to extract all contributors.
          fetch-depth: 0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Generate .mailmap
        run: >
          python -c "$(curl -fsSL
          https://raw.githubusercontent.com/kdeldycke/workflows/main/.github/update_mailmap.py)"
      - uses: peter-evans/create-pull-request@v4.2.3
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Update .mailmap"
          title: "[autofix] Update .mailmap"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`docs.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/docs.yaml) workflow.


            </details>
          labels: "ðŸ“š documentation"
          branch: update-mailmap

  project-metadata:
    name: Project metadata
    runs-on: ubuntu-22.04
    outputs:
      is_poetry_project: ${{ steps.project-metadata.outputs.is_poetry_project }}
      package_name: ${{ steps.project-metadata.outputs.package_name }}
      is_sphinx: ${{ steps.project-metadata.outputs.is_sphinx }}
      active_autodoc: ${{ steps.project-metadata.outputs.active_autodoc }}
    steps:
      - uses: actions/checkout@v3.2.0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Project metadata
        id: project-metadata
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: >
          python -c "$(curl -fsSL
          https://raw.githubusercontent.com/kdeldycke/workflows/main/.github/metadata.py)"

  update-deps-graph:
    name: Update dependency graph
    needs:
      - project-metadata
    if: fromJSON(needs.project-metadata.outputs.is_poetry_project)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.2.0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install pinned pipdeptree on system
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Install project with Poetry
        run: |
          poetry install --no-interaction --no-ansi
      - name: Install pipdeptree in Poetry
        # pipdeptree needs to be installed within Poetry's venv to see dependencies. Use the pipdeptree installed
        # above to guess the version pinned in the requirements.txt.
        run: >
          poetry run python -m pip install
          "$( pipdeptree | grep pipdeptree | sed 's/pipdeptree/pipdeptree[graphviz]/' )"
      - name: Install Graphviz
        run: |
          sudo apt install graphviz
      - name: Run pipdeptree for debug
        run: >
          poetry run pipdeptree --packages ${{ needs.project-metadata.outputs.package_name }}
      - name: Generate graph
        run: >
          poetry run pipdeptree --packages ${{ needs.project-metadata.outputs.package_name }}
          --graph-output png > ${{ inputs.dependency-graph-output || './docs/images/dependencies.png' }}
      - uses: peter-evans/create-pull-request@v4.2.3
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Regenerate dependency graph"
          title: "[autofix] Regenerate dependency graph"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`docs.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/docs.yaml) workflow.


            </details>
          labels: "ðŸ“š documentation"
          branch: update-deps-graph

  update-autodoc:
    name: Update autodoc
    needs:
      - project-metadata
    if: >
      fromJSON(needs.project-metadata.outputs.is_poetry_project)
      && fromJSON(needs.project-metadata.outputs.active_autodoc)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.2.0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Install project dependencies
        run: |
          poetry install --no-interaction --no-ansi
      - name: Run Sphinx
        run: |
          poetry run sphinx-apidoc --no-toc --module-first --force -o ./docs .
      - uses: peter-evans/create-pull-request@v4.2.3
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Update Sphinx autodoc"
          title: "[autofix] Update Sphinx autodoc"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`docs.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/docs.yaml) workflow.


            </details>
          labels: "ðŸ“š documentation"
          branch: update-autodoc

  deploy-docs:
    name: Deploy Sphinx doc
    needs:
      - project-metadata
    if: fromJSON(needs.project-metadata.outputs.is_poetry_project) && fromJSON(needs.project-metadata.outputs.is_sphinx)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.2.0
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: "3.11"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Install project dependencies
        # Let sphinx-click access project's code to generate CLI help.
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
      - name: Build documentation
        run: |
          poetry run sphinx-build -b html ./docs ./docs/html
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3.9.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/html
          force_orphan: true