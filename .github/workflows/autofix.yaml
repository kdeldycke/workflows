---
name: Autofix
"on":
  workflow_call:
    inputs:
      gitignore-location:
        description: 'File path of the .gitignore to update, relative to the root of the repository.'
        default: './.gitignore'
        required: false
        type: string
      gitignore-extra-categories:
        description: 'List of additional categories to add to gitignore file.'
        required: false
        type: string
  push:
    branches:
      - main

concurrency:
  # Group workflow jobs so new commits cancels in-progress execution triggered by previous commits.
  # Source: https://mail.python.org/archives/list/pypa-committers@python.org/thread/PCBCQMJF64JGRBOX7E2EE4YLKHT4DI55/
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:

  # TODO: Deduplicate with the step from docs.yaml and release.yaml
  poetry-metadata:
    name: Poetry metadata
    runs-on: ubuntu-20.04
    outputs:
      is_poetry: ${{ steps.detection.outputs.is_poetry }}
      package_name: ${{ steps.extract_name.outputs.package_name }}
      # Mypy needs to be fed with this parameter:
      #   --python-version x.y
      # Proposed upstream (but rejected) at: https://github.com/python/mypy/issues/13294
      mypy_params: ${{ steps.py_versions.outputs.mypy_params }}
      # Black should be fed with a subset of these parameters:
      #   --target-version py33
      #   --target-version py34
      #   --target-version py35
      #   --target-version py36
      #   --target-version py37
      #   --target-version py38
      #   --target-version py39
      #   --target-version py310
      #   --target-version py311
      # "You should include all Python versions that you want your code to run under.",
      # as per: https://github.com/psf/black/issues/751
      # Currently being discussed upstream at: https://github.com/psf/black/issues/3124
      black_params: ${{ steps.py_versions.outputs.black_params }}
      # Pyupgrade needs to be fed with one of these parameters:
      #   --py3-plus
      #   --py36-plus
      #   --py37-plus
      #   --py38-plus
      #   --py39-plus
      #   --py310-plus
      #   --py311-plus
      # Proposed upstream (but rejected) at: https://github.com/asottile/pyupgrade/issues/688
      pyupgrade_params: ${{ steps.py_versions.outputs.pyupgrade_params }}
    steps:
      - uses: actions/checkout@v3.0.2
      - id: detection
        run: |
          echo "::set-output name=is_poetry::$( [[ -f 'pyproject.toml' && -f 'poetry.lock' ]] && echo 'true' )"
      - name: Install tomli
        if: steps.detection.outputs.is_poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v1.7.0/requirements.txt
      - name: Extract package name
        if: steps.detection.outputs.is_poetry
        id: extract_name
        shell: python
        run: |
          from pathlib import Path

          import sys

          if sys.version_info >= (3, 11):
              import tomllib
          else:
              import tomli as tomllib

          # Locate and loads pyproject.toml.
          toml_path = Path("./pyproject.toml")
          toml_config = tomllib.loads(toml_path.read_text())

          package_name = toml_config["tool"]["poetry"]["name"]

          if package_name:
              print(f"::set-output name=package_name::{package_name}")
      - name: Python versions for black, mypy and pyupgrade
        if: steps.detection.outputs.is_poetry
        id: py_versions
        shell: python
        run: |
          from pathlib import Path

          from poetry.core.pyproject.toml import PyProjectTOML
          from poetry.core.semver import parse_constraint

          pyproject = PyProjectTOML(Path("./pyproject.toml"))
          min_version = parse_constraint(pyproject.poetry_config["dependencies"]["python"]).min

          # Generate mypy parameter.
          print(f"::set-output name=mypy_params::--python-version {min_version.major}.{min_version.minor}")

          # Generate black parameters.
          black_params = []
          if min_version.major == 3 and min_version.minor >= 3:
              for minor in range(min_version.minor, 11 + 1):
                  black_params.append(f"--target-version py3{minor}")
          print(f"::set-output name=black_params::{' '.join(black_params)}")

          # Generate pyupgrade parameter.
          pyupgrade_param = ""
          if min_version.major == 3:
              minor_version = ""
              if min_version.minor >= 6:
                  minor_version = min_version.minor
              pyupgrade_param = f"--py3{minor_version}-plus"
          print(f"::set-output name=pyupgrade_params::{pyupgrade_param}")
      - name: Metadata results
        run: |
          echo "Is project poetry-based? ${{ steps.detection.outputs.is_poetry && true || false }}"
          echo "Package name: ${{ steps.extract_name.outputs.package_name }}"
          echo "Mypy parameters: ${{ steps.py_versions.outputs.mypy_params }}"
          echo "Black parameters: ${{ steps.py_versions.outputs.black_params }}"
          echo "Pyupgrade parameters: ${{ steps.py_versions.outputs.pyupgrade_params }}"

  modernize-python:
    name: Modernize Python
    needs:
      - poetry-metadata
    if: needs.poetry-metadata.outputs.is_poetry
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.2.0
        with:
          python-version: "3.10"
      - name: Install pip and Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
      - name: Install pyupgrade
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v1.7.0/requirements.txt
      - name: Run pyupgrade
        run: >
          find ./ -type f -name '*.py' -print -exec
          pyupgrade ${{ needs.poetry-metadata.outputs.pyupgrade_params }} "{}" \;
      - uses: peter-evans/create-pull-request@v4.0.4
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Modernize Python"
          title: "[autofix] Modernize Python"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: modernize-python

  format-python:
    name: Format Python
    needs:
      - poetry-metadata
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-python@v4.2.0
        with:
          python-version: "3.10"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install requirements
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v1.7.0/requirements.txt
      - name: Run isort
        # https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#isort
        run: |
          isort --profile black .
      - name: Run pycln
        # Black is not removing unused imports, as per https://github.com/psf/black/issues/86 . So we rely on pycln.
        run: |
          pycln .
      - name: Run docformatter
        run: |
          docformatter --recursive --in-place --wrap-summaries 88 --wrap-descriptions 88 .
      - name: Run autopep8
        # Black is not formatting comments, as per https://github.com/psf/black/issues/181#issuecomment-385326100 .
        # We use autopep8 to only wrap long-line comments and reduce Pylint complaints.
        #  - E501 is "Try to make lines fit within --max-line-length characters."
        #  - --aggressive is requires to force autopep8 to consider comments.
        run: |
          autopep8 --recursive --in-place --max-line-length 88 --select E501 --aggressive .
      - name: Run Black
        run: |
          black ${{ needs.poetry-metadata.outputs.black_params }} .
      - uses: peter-evans/create-pull-request@v4.0.4
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Format Python"
          title: "[autofix] Format Python"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: format-python

  format-markdown:
    name: Format Markdown
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install mdformat
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/v1.7.0/requirements.txt
      - name: Auto-format Markdown
        run: |
          find ./ -iname "*.md" -exec mdformat "{}" \;
      - name: Remove forbidden TOC entries in awesome lists
        if: startsWith(github.event.repository.name, 'awesome-')
        # See: https://github.com/sindresorhus/awesome-lint/blob/v0.18.0/rules/toc.js#L15-L18
        # Also remove the title of the section containing the TOC (i.e. "Contents") to fix the following error:
        #   âœ–  26:1  ToC item "Contents" does not match corresponding heading "Meta"  remark-lint:awesome-toc
        # TODO: contribute these fixes to mdformat-toc as configurable options.
        run: |
          gawk -i inplace '!/^- \[(Contents|Contributing|Footnotes)\]\(#.+\)$/{print}' ./readme.md
      - uses: peter-evans/create-pull-request@v4.0.4
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Format Markdown"
          title: "[autofix] Format Markdown"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ“š documentation"
          branch: format-markdown

  format-json:
    name: Format JSON
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install linter
        run: |
          sudo npm install --global jsonlint
      - name: Lint
        run: |
          find ./ -type f -name '*.json' -print -exec jsonlint --in-place "{}" \;
      - uses: peter-evans/create-pull-request@v4.0.4
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Format JSON"
          title: "[autofix] Format JSON"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: format-json

  check-gitignore:
    name: Does .gitignore exist?
    runs-on: ubuntu-20.04
    outputs:
      exists: ${{ steps.detection.outputs.exists }}
    steps:
      - uses: actions/checkout@v3.0.2
      - id: detection
        # Bare-called reused workflow are not fed with defaults, so force it here.
        run: >
          echo "::set-output name=exists::$( [[ -f
          '${{ inputs.gitignore-location || './.gitignore' }}' ]] && echo 'true' )"
      - name: Detection results
        run: |
          echo "Does .gitignore exist at root? ${{ steps.detection.outputs.exists && true || false }}"

  update-gitignore:
    name: Update .gitignore
    needs:
      - check-gitignore
    # Only update gitignore if a file is found at the root of repository.
    if: needs.check-gitignore.outputs.exists
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install git-extras
        run: |
          sudo apt install --yes git-extras
      - name: Fetch category definitions
        # Update the list manually so the first call below will not introduce these extra log messages:
        #   -----Initial gitignore.io list----
        #   -----Save to /home/runner/.gi_list-----
        run: |
          git ignore-io --update-list
      - name: Generate .gitignore
        run: >
          git ignore-io emacs git linux macos nohup python vim virtualenv visualstudiocode windows
          ${{ inputs.gitignore-extra-categories }} > ${{ inputs.gitignore-location || './.gitignore' }}
      - uses: peter-evans/create-pull-request@v4.0.4
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Update .gitignore"
          title: "[autofix] Update .gitignore"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: update-gitignore
