---
name: Autofix
"on":
  workflow_call:
    inputs:
      gitignore-location:
        description: 'File path of the .gitignore to update, relative to the root of the repository.'
        default: './.gitignore'
        required: false
        type: string
      gitignore-extra-categories:
        description: 'List of additional categories to add to gitignore file.'
        required: false
        type: string
  push:
    branches:
      - main

jobs:

  # TODO: Deduplicate with the step from docs.yaml and release.yaml
  is-poetry-based:
    name: Is project Poetry-based?
    runs-on: ubuntu-20.04
    outputs:
      is_poetry: ${{ steps.detection.outputs.is_poetry }}
    steps:
      - uses: actions/checkout@v3.0.0
      - id: detection
        run: |
          echo "::set-output name=is_poetry::$( [[ -f 'pyproject.toml' && -f 'poetry.lock' ]] && echo 'true' )"
      - name: Results
        run: |
          echo "${{ steps.detection.outputs.is_poetry }}"

  modernize-python:
    name: Modernize Python
    needs:
      - is-poetry-based
    if: needs.is-poetry-based.outputs.is_poetry
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
      - uses: actions/setup-python@v3.1.1
      - name: Install pip and Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
      - name: Install pyupgrade
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Extract minimal Python version from Poetry specs
        id: py_version
        shell: python
        run: |
          from pathlib import Path

          from poetry.core.pyproject.toml import PyProjectTOML
          from poetry.core.semver import parse_constraint

          pyproject = PyProjectTOML(Path("./pyproject.toml"))
          version = parse_constraint(pyproject.poetry_config["dependencies"]["python"])

          # Specific versions supported by pyupgrade:
          #   --py3-plus
          #   --py36-plus
          #   --py37-plus
          #   --py38-plus
          #   --py39-plus
          #   --py310-plus
          #   --py311-plus
          py_param = ""
          if version.min.major == 3:
              minor_version = version.min.minor if (6 <= version.min.minor <= 11) else ""
              py_param = f"--py3{minor_version}-plus"

          print(f"::set-output name=min_py_param::{py_param}")
      - name: Run pyupgrade
        run: |
          find ./ -type f -name '*.py' -print -exec pyupgrade ${{ steps.py_version.outputs.min_py_param }} "{}" \;
      - uses: peter-evans/create-pull-request@v4.0.2
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Modernize Python"
          title: "[autofix] Modernize Python"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: modernize-python

  format-python:
    name: Format Python
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
      - uses: actions/setup-python@v3.1.1
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Black and isort
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Run isort
        run: |
          isort .
      - name: Run Black
        run: |
          black .
      - uses: peter-evans/create-pull-request@v4.0.2
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Format Python"
          title: "[autofix] Format Python"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: format-python

  format-markdown:
    name: Format Markdown
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install mdformat
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Auto-format Markdown
        run: |
          find ./ -iname "*.md" -exec mdformat "{}" \;
      - name: Remove forbidden TOC entries in awesome lists
        if: startsWith(github.event.repository.name, 'awesome-')
        # See: https://github.com/sindresorhus/awesome-lint/blob/v0.18.0/rules/toc.js#L15-L18
        # Also remove the title of the section containing the TOC (i.e. "Contents") to fix the following error:
        #   âœ–  26:1  ToC item "Contents" does not match corresponding heading "Meta"  remark-lint:awesome-toc
        # TODO: contribute these fixes to mdformat-toc as configurable options.
        run: |
          gawk -i inplace '!/^- \[(Contents|Contributing|Footnotes)\]\(#.+\)$/{print}' ./readme.md
      - uses: peter-evans/create-pull-request@v4.0.2
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Format Markdown"
          title: "[autofix] Format Markdown"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ“š documentation"
          branch: format-markdown

  format-json:
    name: Format JSON
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
      - name: Install linter
        run: |
          sudo npm install --global jsonlint
      - name: Lint
        run: |
          find ./ -type f -name '*.json' -print -exec jsonlint --in-place "{}" \;
      - uses: peter-evans/create-pull-request@v4.0.2
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Format JSON"
          title: "[autofix] Format JSON"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: format-json

  check-gitignore:
    name: Does .gitignore exist?
    runs-on: ubuntu-20.04
    outputs:
      exists: ${{ steps.detection.outputs.exists }}
    steps:
      - uses: actions/checkout@v3.0.0
      - id: detection
        # Bare-called reused workflow are not fed with defaults, so force it here.
        run: >
          echo "::set-output name=exists::$( [[ -f
          '${{ inputs.gitignore-location || './.gitignore' }}' ]] && echo 'true' )"
      - name: Results
        run: |
          echo "${{ steps.detection.outputs.exists }}"

  update-gitignore:
    name: Update .gitignore
    needs:
      - check-gitignore
    # Only update gitignore if a file is found at the root of repository.
    if: needs.check-gitignore.outputs.exists
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.0
      - name: Install git-extras
        run: |
          sudo apt install -y git-extras
      - name: Fetch category definitions
        # Update the list manually so the first call below will not introduce these extra log messages:
        #   -----Initial gitignore.io list----
        #   -----Save to /home/runner/.gi_list-----
        run: |
          git ignore-io --update-list
      - name: Generate .gitignore
        run: >
          git ignore-io emacs git linux macos nohup python vim virtualenv visualstudiocode windows
          ${{ inputs.gitignore-extra-categories }} > ${{ inputs.gitignore-location || './.gitignore' }}
      - uses: peter-evans/create-pull-request@v4.0.2
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Update .gitignore"
          title: "[autofix] Update .gitignore"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: update-gitignore
