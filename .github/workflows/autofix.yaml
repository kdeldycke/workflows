---
name: Autofix
"on":
  workflow_call:
    inputs:
      gitignore-location:
        description: 'File path of the .gitignore to update, relative to the root of the repository.'
        default: './.gitignore'
        required: false
        type: string
      gitignore-extra-categories:
        description: 'List of additional categories to add to .gitignore file.'
        required: false
        type: string
      gitignore-extra-content:
        description: 'Additional content to append at the end of the generated .gitignore file.'
        required: false
        type: string
  push:
    branches:
      - main

concurrency:
  # Group workflow jobs so new commits cancels in-progress execution triggered by previous commits.
  # Source: https://mail.python.org/archives/list/pypa-committers@python.org/thread/PCBCQMJF64JGRBOX7E2EE4YLKHT4DI55/
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:

  project-metadata:
    name: Project metadata
    runs-on: ubuntu-22.04
    outputs:
      python_files: ${{ steps.project-metadata.outputs.python_files }}
      doc_files: ${{ steps.project-metadata.outputs.doc_files }}
      black_params: ${{ steps.project-metadata.outputs.black_params }}
      ruff_params: ${{ steps.project-metadata.outputs.ruff_params }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          # Checkout pull request HEAD commit to ignore actions/checkout's merge commit. Fallback to push SHA.
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          # We're going to browse all new commits.
          fetch-depth: 0
      - uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.12"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Poetry
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Project metadata
        id: project-metadata
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: >
          python -c "$(curl -fsSL
          https://raw.githubusercontent.com/kdeldycke/workflows/main/.github/metadata.py)"

  format-python:
    name: Format Python
    needs:
      - project-metadata
    if: needs.project-metadata.outputs.python_files || needs.project-metadata.outputs.doc_files
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.12"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install ruff, blacken-docs, autopep8 and docformatter
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Run Ruff check
        # --preview - Enable preview mode; checks will include unstable rules and fixes.
        #   See: https://astral.sh/blog/ruff-v0.1.0#introducing-preview-mode
        # --unsafe-fixes - Include fixes that may not retain the original intent of the code.
        #   Ruff will be conservative by default, and only apply fixes that are guaranteed to be safe.
        #   See: https://astral.sh/blog/ruff-v0.1.0#respecting-fix-safety
        # --ignore=D400 - First line should end with a period.
        #   Allows docstrings to end up with any punctuation, not just a period.
        #   See: https://github.com/astral-sh/ruff/issues/1858#issuecomment-1382640623
        # --ignore=ERA001 - Found commented-out code.
        #   Do not remove commented code, as it might be used for documentation.
        #   See: https://docs.astral.sh/ruff/rules/#eradicate-era
        run: >
          ruff check --fix-only --output-format=github ${{ needs.project-metadata.outputs.ruff_params }}
          --preview
          --unsafe-fixes
          --ignore=D400
          --ignore=ERA001
          .
      - name: Run autopep8
        if: needs.project-metadata.outputs.python_files
        # Ruff is not wrapping comments: https://github.com/astral-sh/ruff/issues/7414
        # We use autopep8 to only wrap long-line comments:
        #  - E501 is "Try to make lines fit within --max-line-length characters."
        #  - --aggressive is requires to force autopep8 to consider comments.
        # Explicit list of files is provided, as autopep8 is not able to handle find files in ".github" subdirectory.
        run: >
          autopep8 --recursive --in-place --max-line-length 88 --select E501 --aggressive
          ${{ needs.project-metadata.outputs.python_files }}
      - name: Run Ruff format
        run: |
          ruff format .
      - name: Run blacken-docs
        # blacken-docs reuses Black's ``--target-version pyXY`` parameter.
        # Ignore failing command: blacken-docs returns 1 if it finds a file that needs to be reformatted:
        # https://github.com/adamchainz/blacken-docs/blob/79ef671/blacken_docs.py#L207-L211
        run: >
          blacken-docs
          --line-length 88
          ${{ needs.project-metadata.outputs.black_params }}
          ${{ needs.project-metadata.outputs.python_files }}
          ${{ needs.project-metadata.outputs.doc_files }}
          || true
      - name: Run docformatter
        # Always ignore failing command, as docformatter returns exit code 3 if it finds a file that needs to be
        # reformatted:
        # https://github.com/PyCQA/docformatter/issues/157#issuecomment-1402573058
        # https://github.com/PyCQA/docformatter/commit/f7d50ae
        run: |
          docformatter --recursive --in-place --black . || true
      - uses: peter-evans/create-pull-request@v5.0.2
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Format Python"
          title: "[autofix] Format Python"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: format-python

  format-markdown:
    name: Format Markdown
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.12"
      - name: Install pip
        run: |
          python -m pip install --upgrade pip
      - name: Install mdformat
        run: >
          python -m pip install --requirement
          https://raw.githubusercontent.com/kdeldycke/workflows/main/requirements.txt
      - name: Install shfmt
        run: |
          sudo apt install --yes shfmt
      - name: Auto-format Markdown
        run: |
          find ./ -iname "*.md" -exec mdformat "{}" \;
      - name: Markdown fixes for Awesome Lists
        if: startsWith(github.event.repository.name, 'awesome-')
        # Remove forbidden TOC entries
        #     See: https://github.com/sindresorhus/awesome-lint/blob/v0.18.0/rules/toc.js#L15-L18
        #     Also remove the title of the section containing the TOC (i.e. "Contents") to fix the following error:
        #       âœ–  26:1  ToC item "Contents" does not match corresponding heading "Meta"  remark-lint:awesome-toc
        #
        # TODO: contribute these fixes to mdformat-toc as configurable options.
        run: >
          find ./ -type f \( -name 'readme.md' -or -name 'readme.*.md' \) -print
          -exec gawk -i inplace '!/^- \[(Contents|Contributing|Footnotes)\]\(#.+\)$/{print}' "{}" \;
      - uses: peter-evans/create-pull-request@v5.0.2
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Format Markdown"
          title: "[autofix] Format Markdown"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ“š documentation"
          branch: format-markdown

  format-json:
    name: Format JSON
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Install jsonlint
        run: |
          sudo npm install --global jsonlint
      - name: Lint
        run: |
          find ./ -type f -name '*.json' -print -exec jsonlint --in-place "{}" \;
      - uses: peter-evans/create-pull-request@v5.0.2
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Format JSON"
          title: "[autofix] Format JSON"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: format-json

  check-gitignore:
    name: Does .gitignore exist?
    runs-on: ubuntu-22.04
    outputs:
      exists: ${{ steps.detection.outputs.exists }}
    steps:
      - uses: actions/checkout@v4.1.1
      - id: detection
        # Bare-called reused workflow are not fed with defaults, so force it here.
        run: |
          echo "exists=$( [[ -f '${{ inputs.gitignore-location }}' ]] && echo 'true' )" >> "$GITHUB_OUTPUT"
      - name: Detection results
        run: |
          echo "Does .gitignore exist at root? ${{ steps.detection.outputs.exists && true || false }}"

  update-gitignore:
    name: Update .gitignore
    needs:
      - check-gitignore
    # Only update gitignore if a file is found at the root of repository.
    if: needs.check-gitignore.outputs.exists
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Install git-extras
        run: |
          sudo apt update
          sudo apt install --yes git-extras
      - name: Fetch category definitions
        # Update the list manually so the first call below will not introduce these extra log messages:
        #   -----Initial gitignore.io list----
        #   -----Save to /home/runner/.gi_list-----
        run: |
          git ignore-io --update-list
      - name: Generate .gitignore
        run: >
          git ignore-io ${{ inputs.gitignore-extra-categories }}
          certificates
          emacs
          git
          gpg
          linux
          macos
          nohup
          python
          ssh
          vim
          virtualenv
          visualstudiocode
          windows > ${{ inputs.gitignore-location }}
      - name: Append extra content to .gitignore
        if: inputs.gitignore-extra-content
        run: |
          tee -a ${{ inputs.gitignore-location }} <<-EOF

          ${{ inputs.gitignore-extra-content }}
          EOF
      - uses: peter-evans/create-pull-request@v5.0.2
        with:
          assignees: ${{ github.actor }}
          commit-message: "[autofix] Update .gitignore"
          title: "[autofix] Update `.gitignore`"
          body: >
            <details><summary><code>Workflow metadata</code></summary>


            > [Auto-generated on run `#${{ github.run_id }}`](${{ github.event.repository.html_url }}/actions/runs/${{
            github.run_id }}) by `${{ github.job }}` job from [`autofix.yaml`](${{ github.event.repository.html_url
            }}/blob/${{ github.sha }}/.github/workflows/autofix.yaml) workflow.


            </details>
          labels: "ðŸ¤– ci"
          branch: update-gitignore
